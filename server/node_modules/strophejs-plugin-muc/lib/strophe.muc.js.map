{"version":3,"file":"strophe.muc.js","sources":["../src/strophe.muc.coffee"],"sourcesContent":["###\n *Plugin to implement the MUC extension.\n   http://xmpp.org/extensions/xep-0045.html\n *Previous Author:\n    Nathan Zorn <nathan.zorn@gmail.com>\n *Complete CoffeeScript rewrite:\n    Andreas Guth <guth@dbis.rwth-aachen.de>\n###\n`import { $build, $iq, $msg, $pres, Strophe } from 'strophe.js';`\n\nStrophe.addConnectionPlugin 'muc',\n  _connection: null\n  rooms: {}\n  roomNames: []\n\n  ###Function\n  Initialize the MUC plugin. Sets the correct connection object and\n  extends the namesace.\n  ###\n  init: (conn) ->\n    @_connection = conn\n    @_muc_handler = null\n    # extend name space\n    #   NS.MUC - XMPP Multi-user chat namespace from XEP 45.\n    Strophe.addNamespace 'MUC_OWNER',     Strophe.NS.MUC+\"#owner\"\n    Strophe.addNamespace 'MUC_ADMIN',     Strophe.NS.MUC+\"#admin\"\n    Strophe.addNamespace 'MUC_USER',      Strophe.NS.MUC+\"#user\"\n    Strophe.addNamespace 'MUC_ROOMCONF',  Strophe.NS.MUC+\"#roomconfig\"\n    Strophe.addNamespace 'MUC_REGISTER', \"jabber:iq:register\"\n\n  ###Function\n  Join a multi-user chat room\n  Parameters:\n  (String) room - The multi-user chat room to join.\n  (String) nick - The nickname to use in the chat room. Optional\n  (Function) msg_handler_cb - The function call to handle messages from the\n  specified chat room.\n  (Function) pres_handler_cb - The function call back to handle presence\n  in the chat room.\n  (Function) roster_cb - The function call to handle roster info in the chat room\n  (String) password - The optional password to use. (password protected\n  rooms only)\n  (Object) history_attrs - Optional attributes for retrieving history\n  (XML DOM Element) extended_presence - Optional XML for extending presence\n  ###\n  join: (room, nick, msg_handler_cb, pres_handler_cb, roster_cb, password, history_attrs, extended_presence) ->\n    room_nick = @test_append_nick(room, nick)\n    msg = $pres(\n      from: @_connection.jid\n      to: room_nick )\n    .c(\"x\", xmlns: Strophe.NS.MUC)\n\n    if history_attrs?\n      msg = msg.c(\"history\", history_attrs).up()\n\n    if password?\n      msg.cnode Strophe.xmlElement(\"password\", [], password)\n\n    if extended_presence?\n      msg.up().cnode extended_presence\n\n    # One handler for all rooms that dispatches to room callbacks\n    @_muc_handler ?=  @_connection.addHandler (stanza) =>\n      from = stanza.getAttribute 'from'\n      return true unless from\n      roomname = from.split(\"/\")[0]\n\n      # Abort if the stanza is not for a known MUC\n      return true unless @rooms[roomname]\n      room = @rooms[roomname]\n\n      handlers = {}\n\n      #select the right handlers\n      if stanza.nodeName is \"message\"\n        handlers = room._message_handlers\n      else if stanza.nodeName is \"presence\"\n        xquery = stanza.getElementsByTagName \"x\"\n        if xquery.length > 0\n          # Handle only MUC user protocol\n          for x in xquery\n            xmlns = x.getAttribute \"xmlns\"\n            if xmlns and xmlns.match Strophe.NS.MUC\n              handlers = room._presence_handlers\n              break\n\n      # loop over selected handlers (if any) and remove on false\n      for id, handler of handlers\n        delete handlers[id] unless handler stanza, room\n\n      return true\n\n    unless @rooms.hasOwnProperty(room)\n      @rooms[room] = new XmppRoom(@, room, nick, password )\n      @rooms[room].addHandler 'presence', pres_handler_cb if pres_handler_cb\n      @rooms[room].addHandler 'message', msg_handler_cb if msg_handler_cb\n      @rooms[room].addHandler 'roster', roster_cb if roster_cb\n      @roomNames.push room\n\n    @_connection.send msg\n\n  ###Function\n  Leave a multi-user chat room\n  Parameters:\n  (String) room - The multi-user chat room to leave.\n  (String) nick - The nick name used in the room.\n  (Function) handler_cb - Optional function to handle the successful leave.\n  (String) exit_msg - optional exit message.\n  Returns:\n  iqid - The unique id for the room leave.\n  ###\n  leave: (room, nick, handler_cb, exit_msg) ->\n    id = @roomNames.indexOf room\n    delete @rooms[room]\n    if id >=0\n      @roomNames.splice id, 1\n      if @roomNames.length is 0\n        @_connection.deleteHandler @_muc_handler\n        @_muc_handler = null\n    room_nick = @test_append_nick room, nick\n    presenceid = @_connection.getUniqueId()\n    presence = $pres (\n      type: \"unavailable\"\n      id: presenceid\n      from: @_connection.jid\n      to: room_nick )\n\n    presence.c \"status\", exit_msg if exit_msg?\n\n    if handler_cb?\n      @_connection.addHandler(\n        handler_cb\n        null\n        \"presence\"\n        null\n        presenceid )\n\n    @_connection.send presence\n    return presenceid\n\n  ###Function\n  Parameters:\n  (String) room - The multi-user chat room name.\n  (String) nick - The nick name used in the chat room.\n  (String) message - The plaintext message to send to the room.\n  (String) html_message - The message to send to the room with html markup.\n  (String) type - \"groupchat\" for group chat messages o\n                  \"chat\" for private chat messages\n  Returns:\n  msgiq - the unique id used to send the message\n  ###\n  message: (room, nick, message, html_message, type, msgid) ->\n    room_nick = @test_append_nick(room, nick)\n    type = type or if nick? then \"chat\" else \"groupchat\"\n    msgid = msgid or @_connection.getUniqueId()\n    msg = $msg(\n      to: room_nick\n      from: @_connection.jid\n      type: type\n      id: msgid )\n    .c(\"body\")\n    .t(message)\n    msg.up()\n    if html_message?\n      msg.c(\"html\", xmlns: Strophe.NS.XHTML_IM)\n      .c(\"body\", xmlns: Strophe.NS.XHTML)\n      .h(html_message)\n      if msg.node.childNodes.length is 0\n        # html creation or import failed somewhere; fallback to plaintext\n        parent = msg.node.parentNode\n        msg.up().up()\n        # get rid of the empty html element if we got invalid html\n        #so we don't send an empty message\n        msg.node.removeChild parent\n      else\n        msg.up().up()\n    msg.c(\"x\", xmlns: \"jabber:x:event\").c(\"composing\")\n    @_connection.send msg\n    return msgid\n\n  ###Function\n  Convenience Function to send a Message to all Occupants\n  Parameters:\n  (String) room - The multi-user chat room name.\n  (String) message - The plaintext message to send to the room.\n  (String) html_message - The message to send to the room with html markup.\n  (String) msgid - Optional unique ID which will be set as the 'id' attribute of the stanza\n  Returns:\n  msgiq - the unique id used to send the message\n  ###\n  groupchat: (room, message, html_message, msgid) ->\n    @message room, null, message, html_message, undefined, msgid\n\n  ###Function\n  Send a mediated invitation.\n  Parameters:\n  (String) room - The multi-user chat room name.\n  (String) receiver - The invitation's receiver.\n  (String) reason - Optional reason for joining the room.\n  Returns:\n  msgiq - the unique id used to send the invitation\n  ###\n  invite: (room, receiver, reason) ->\n    msgid = @_connection.getUniqueId()\n    invitation = $msg(\n      from: @_connection.jid\n      to: room\n      id: msgid )\n    .c('x', xmlns: Strophe.NS.MUC_USER)\n    .c('invite', to: receiver)\n    invitation.c 'reason', reason if reason?\n    @_connection.send invitation\n    return msgid\n\n  ###Function\n  Send a mediated multiple invitation.\n  Parameters:\n  (String) room - The multi-user chat room name.\n  (Array) receivers - The invitation's receivers.\n  (String) reason - Optional reason for joining the room.\n  Returns:\n  msgiq - the unique id used to send the invitation\n  ###\n  multipleInvites: (room, receivers, reason) ->\n    msgid = @_connection.getUniqueId()\n    invitation = $msg(\n      from: @_connection.jid\n      to: room\n      id: msgid )\n    .c('x', xmlns: Strophe.NS.MUC_USER)\n\n    for receiver in receivers\n      invitation.c 'invite', to: receiver\n      if reason?\n        invitation.c 'reason', reason\n        invitation.up()\n      invitation.up()\n\n    @_connection.send invitation\n    return msgid\n\n  ###Function\n  Send a direct invitation.\n  Parameters:\n  (String) room - The multi-user chat room name.\n  (String) receiver - The invitation's receiver.\n  (String) reason - Optional reason for joining the room.\n  (String) password - Optional password for the room.\n  Returns:\n  msgiq - the unique id used to send the invitation\n  ###\n  directInvite: (room, receiver, reason, password) ->\n    msgid = @_connection.getUniqueId()\n    attrs =\n      xmlns: 'jabber:x:conference'\n      jid: room\n    attrs.reason = reason if reason?\n    attrs.password = password if password?\n    invitation = $msg(\n      from: @_connection.jid\n      to: receiver\n      id: msgid )\n    .c('x', attrs)\n    @_connection.send invitation\n    return msgid\n\n  ###Function\n  Queries a room for a list of occupants\n  (String) room - The multi-user chat room name.\n  (Function) success_cb - Optional function to handle the info.\n  (Function) error_cb - Optional function to handle an error.\n  Returns:\n  id - the unique id used to send the info request\n  ###\n  queryOccupants: (room, success_cb, error_cb) ->\n    attrs = xmlns: Strophe.NS.DISCO_ITEMS\n    info = $iq(\n      from:this._connection.jid\n      to:room\n      type:'get' )\n    .c('query', attrs)\n    @_connection.sendIQ info, success_cb, error_cb\n\n  ###Function\n  Start a room configuration.\n  Parameters:\n  (String) room - The multi-user chat room name.\n  (Function) handler_cb - Optional function to handle the config form.\n  Returns:\n  id - the unique id used to send the configuration request\n  ###\n  configure: (room, handler_cb, error_cb) ->\n    # send iq to start room configuration\n    config = $iq(\n      to:room\n      type: \"get\" )\n    .c(\"query\", xmlns: Strophe.NS.MUC_OWNER)\n    stanza = config.tree()\n    @_connection.sendIQ stanza, handler_cb, error_cb\n\n  ###Function\n  Cancel the room configuration\n  Parameters:\n  (String) room - The multi-user chat room name.\n  Returns:\n  id - the unique id used to cancel the configuration.\n  ###\n  cancelConfigure: (room) ->\n    #send iq to start room configuration\n    config = $iq(\n      to: room\n      type: \"set\" )\n    .c(\"query\", xmlns: Strophe.NS.MUC_OWNER)\n    .c(\"x\", xmlns: \"jabber:x:data\", type: \"cancel\")\n    stanza = config.tree()\n    @_connection.sendIQ stanza\n\n  ###Function\n  Save a room configuration.\n  Parameters:\n  (String) room - The multi-user chat room name.\n  (Array) config- Form Object or an array of form elements used to configure the room.\n  Returns:\n  id - the unique id used to save the configuration.\n  ###\n  saveConfiguration: (room, config, success_cb, error_cb) ->\n    iq = $iq(\n      to: room\n      type: \"set\" )\n    .c(\"query\", xmlns: Strophe.NS.MUC_OWNER)\n    if typeof Strophe.x isnt \"undefined\" and typeof Strophe.x.Form isnt \"undefined\" and config instanceof Strophe.x.Form\n      config.type = \"submit\"\n      iq.cnode config.toXML()\n    else\n      iq.c(\"x\", xmlns: \"jabber:x:data\", type: \"submit\")\n      iq.cnode(conf).up() for conf in config\n    stanza = iq.tree()\n    @_connection.sendIQ stanza, success_cb, error_cb\n\n  ###Function\n  Parameters:\n  (String) room - The multi-user chat room name.\n  Returns:\n  id - the unique id used to create the chat room.\n  ###\n  createInstantRoom: (room, success_cb, error_cb) ->\n    roomiq = $iq(\n      to: room\n      type: \"set\" )\n    .c(\"query\", xmlns: Strophe.NS.MUC_OWNER)\n    .c(\"x\", xmlns: \"jabber:x:data\", type: \"submit\")\n    @_connection.sendIQ roomiq.tree(), success_cb, error_cb\n\n  ###Function\n  Parameters:\n  (String) room - The multi-user chat room name.\n  (Object) config - the configuration. ex: {\"muc#roomconfig_publicroom\": \"0\", \"muc#roomconfig_persistentroom\": \"1\"}\n  Returns:\n  id - the unique id used to create the chat room.\n  ###\n  createConfiguredRoom: (room, config, success_cb, error_cb) ->\n    roomiq = $iq(\n      to: room\n      type: \"set\" )\n    .c(\"query\", xmlns: Strophe.NS.MUC_OWNER)\n    .c(\"x\", xmlns: \"jabber:x:data\", type: \"submit\")\n\n    # Owner submits configuration form\n    roomiq.c('field', { 'var': 'FORM_TYPE' }).c('value').t('http://jabber.org/protocol/muc#roomconfig').up().up();\n\n    roomiq.c('field', { 'var': k}).c('value').t(v).up().up() for own k, v of config\n\n    @_connection.sendIQ roomiq.tree(), success_cb, error_cb\n\n  ###Function\n  Set the topic of the chat room.\n  Parameters:\n  (String) room - The multi-user chat room name.\n  (String) topic - Topic message.\n  ###\n  setTopic: (room, topic) ->\n    msg = $msg(\n      to: room\n      from: @_connection.jid\n      type: \"groupchat\" )\n    .c(\"subject\", xmlns: \"jabber:client\")\n    .t(topic)\n    @_connection.send msg.tree()\n\n  ###Function\n  Internal Function that Changes the role or affiliation of a member\n  of a MUC room. This function is used by modifyRole and modifyAffiliation.\n  The modification can only be done by a room moderator. An error will be\n  returned if the user doesn't have permission.\n  Parameters:\n  (String) room - The multi-user chat room name.\n  (Object) item - Object with nick and role or jid and affiliation attribute\n  (String) reason - Optional reason for the change.\n  (Function) handler_cb - Optional callback for success\n  (Function) error_cb - Optional callback for error\n  Returns:\n  iq - the id of the mode change request.\n  ###\n  _modifyPrivilege: (room, item, reason, handler_cb, error_cb) ->\n    iq = $iq(\n      to: room\n      type: \"set\" )\n    .c(\"query\", xmlns: Strophe.NS.MUC_ADMIN)\n    .cnode(item.node)\n\n    iq.c(\"reason\", reason) if reason?\n\n    @_connection.sendIQ iq.tree(), handler_cb, error_cb\n\n  ###Function\n  Changes the role of a member of a MUC room.\n  The modification can only be done by a room moderator. An error will be\n  returned if the user doesn't have permission.\n  Parameters:\n  (String) room - The multi-user chat room name.\n  (String) nick - The nick name of the user to modify.\n  (String) role - The new role of the user.\n  (String) affiliation - The new affiliation of the user.\n  (String) reason - Optional reason for the change.\n  (Function) handler_cb - Optional callback for success\n  (Function) error_cb - Optional callback for error\n  Returns:\n  iq - the id of the mode change request.\n  ###\n  modifyRole: (room, nick, role, reason, handler_cb, error_cb) ->\n    item = $build(\"item\"\n      nick: nick\n      role: role )\n\n    @_modifyPrivilege room, item, reason, handler_cb, error_cb\n\n  kick: (room, nick, reason, handler_cb, error_cb) ->\n    @modifyRole room, nick, 'none', reason, handler_cb, error_cb\n\n  voice: (room, nick, reason, handler_cb, error_cb) ->\n    @modifyRole room, nick, 'participant', reason, handler_cb, error_cb\n\n  mute: (room, nick, reason, handler_cb, error_cb) ->\n    @modifyRole room, nick, 'visitor', reason, handler_cb, error_cb\n\n  op: (room, nick, reason, handler_cb, error_cb) ->\n    @modifyRole room, nick, 'moderator', reason, handler_cb, error_cb\n\n  deop: (room, nick, reason, handler_cb, error_cb) ->\n    @modifyRole room, nick, 'participant', reason, handler_cb, error_cb\n\n  ###Function\n  Changes the affiliation of a member of a MUC room.\n  The modification can only be done by a room moderator. An error will be\n  returned if the user doesn't have permission.\n  Parameters:\n  (String) room - The multi-user chat room name.\n  (String) jid  - The jid of the user to modify.\n  (String) affiliation - The new affiliation of the user.\n  (String) reason - Optional reason for the change.\n  (Function) handler_cb - Optional callback for success\n  (Function) error_cb - Optional callback for error\n  Returns:\n  iq - the id of the mode change request.\n  ###\n  modifyAffiliation: (room, jid, affiliation, reason, handler_cb, error_cb) ->\n    item = $build(\"item\"\n      jid: jid\n      affiliation: affiliation )\n\n    @_modifyPrivilege room, item, reason, handler_cb, error_cb\n\n  ban: (room, jid, reason, handler_cb, error_cb) ->\n    @modifyAffiliation room, jid, 'outcast', reason, handler_cb, error_cb\n\n  member: (room, jid, reason, handler_cb, error_cb) ->\n    @modifyAffiliation room, jid, 'member', reason, handler_cb, error_cb\n\n  revoke: (room, jid, reason, handler_cb, error_cb) ->\n    @modifyAffiliation room, jid, 'none', reason, handler_cb, error_cb\n\n  owner: (room, jid, reason, handler_cb, error_cb) ->\n    @modifyAffiliation room, jid, 'owner', reason, handler_cb, error_cb\n\n  admin: (room, jid, reason, handler_cb, error_cb) ->\n    @modifyAffiliation room, jid, 'admin', reason, handler_cb, error_cb\n\n  ###Function\n  Change the current users nick name.\n  Parameters:\n  (String) room - The multi-user chat room name.\n  (String) user - The new nick name.\n  ###\n  changeNick: (room, user) ->\n    room_nick = @test_append_nick room, user\n    presence = $pres(\n      from: @_connection.jid\n      to: room_nick\n      id: @_connection.getUniqueId() )\n    @_connection.send presence.tree()\n\n  ###Function\n  Change the current users status.\n  Parameters:\n  (String) room - The multi-user chat room name.\n  (String) user - The current nick.\n  (String) show - The new show-text.\n  (String) status - The new status-text.\n  ###\n  setStatus: (room, user, show, status) ->\n    room_nick = @test_append_nick room, user\n    presence = $pres(\n      from: @_connection.jid\n      to: room_nick )\n    presence.c('show', show).up() if show?\n    presence.c('status', status) if status?\n    @_connection.send presence.tree()\n\n  ###Function\n  Registering with a room.\n  @see http://xmpp.org/extensions/xep-0045.html#register\n  Parameters:\n  (String) room - The multi-user chat room name.\n  (Function) handle_cb - Function to call for room list return.\n  (Function) error_cb - Function to call on error.\n  ###\n  registrationRequest: (room, handle_cb, error_cb) ->\n    iq = $iq(\n        to: room,\n        from: @_connection.jid,\n        type: \"get\"\n      )\n    .c(\"query\", xmlns: Strophe.NS.MUC_REGISTER)\n\n    @_connection.sendIQ iq, (stanza) ->\n      $fields = stanza.getElementsByTagName 'field'\n      length = $fields.length\n      fields =\n        required: []\n        optional: []\n\n      for $field in $fields\n        field =\n          var: $field.getAttribute 'var'\n          label: $field.getAttribute 'label'\n          type: $field.getAttribute 'type'\n\n        if $field.getElementsByTagName('required').length > 0\n          fields.required.push field\n        else\n          fields.optional.push field\n\n      handle_cb fields\n    , error_cb\n\n  ###Function\n  Submits registration form.\n  Parameters:\n  (String) room - The multi-user chat room name.\n  (Function) handle_cb - Function to call for room list return.\n  (Function) error_cb - Function to call on error.\n  ###\n  submitRegistrationForm: (room, fields, handle_cb, error_cb) ->\n    iq = $iq({\n      to: room,\n      type: \"set\"\n    }).c(\"query\", xmlns: Strophe.NS.MUC_REGISTER);\n    iq.c(\"x\",\n      xmlns: \"jabber:x:data\",\n      type: \"submit\"\n    );\n    iq.c('field', 'var': 'FORM_TYPE')\n    .c('value')\n    .t('http://jabber.org/protocol/muc#register')\n    .up().up()\n\n    for key, val of fields\n      iq.c('field', 'var': key)\n      .c('value')\n      .t(val).up().up()\n\n    @._connection.sendIQ iq, handle_cb, error_cb\n\n  ###Function\n  List all chat room available on a server.\n  Parameters:\n  (String) server - name of chat server.\n  (String) handle_cb - Function to call for room list return.\n  (String) error_cb - Function to call on error.\n  ###\n  listRooms: (server, handle_cb, error_cb) ->\n    iq = $iq(\n      to: server\n      from: @_connection.jid\n      type: \"get\" )\n    .c(\"query\", xmlns: Strophe.NS.DISCO_ITEMS)\n    @_connection.sendIQ iq, handle_cb, error_cb\n\n  test_append_nick: (room, nick) ->\n    node = Strophe.escapeNode(Strophe.getNodeFromJid(room))\n    domain = Strophe.getDomainFromJid(room)\n    node + \"@\" + domain + if nick? then \"/#{nick}\" else \"\"\n\nclass XmppRoom\n\n\n  constructor: (@client, @name, @nick, @password) ->\n    @roster = {}\n    @_message_handlers = {}\n    @_presence_handlers = {}\n    @_roster_handlers = {}\n    @_handler_ids = 0\n    @client = @client.muc if @client.muc\n    @name = Strophe.getBareJidFromJid @name\n    @addHandler 'presence', @_roomRosterHandler\n\n  join: (msg_handler_cb, pres_handler_cb, roster_cb) ->\n    @client.join(@name, @nick, msg_handler_cb, pres_handler_cb, roster_cb, @password)\n\n  leave: (handler_cb, message) ->\n    @client.leave @name, @nick, handler_cb, message\n    delete @client.rooms[@name]\n\n  message: (nick, message, html_message, type) ->\n    @client.message @name, nick, message, html_message, type\n\n  groupchat: (message, html_message) ->\n    @client.groupchat @name, message, html_message\n\n  invite: (receiver, reason) ->\n    @client.invite @name, receiver, reason\n\n  multipleInvites: (receivers, reason) ->\n    @client.invite @name, receivers, reason\n\n  directInvite: (receiver, reason) ->\n    @client.directInvite @name, receiver, reason, @password\n\n  configure: (handler_cb) ->\n    @client.configure @name, handler_cb\n\n  cancelConfigure: ->\n    @client.cancelConfigure @name\n\n  saveConfiguration: (config) ->\n    @client.saveConfiguration @name, config\n\n  queryOccupants: (success_cb, error_cb) ->\n    @client.queryOccupants @name, success_cb, error_cb\n\n  setTopic: (topic) ->\n    @client.setTopic @name, topic\n\n  modifyRole: (nick, role, reason, success_cb, error_cb) ->\n    @client.modifyRole @name, nick, role, reason, success_cb, error_cb\n\n  kick: (nick, reason, handler_cb, error_cb) ->\n    @client.kick @name, nick, reason, handler_cb, error_cb\n\n  voice: (nick, reason, handler_cb, error_cb) ->\n    @client.voice @name, nick, reason, handler_cb, error_cb\n\n  mute: (nick, reason, handler_cb, error_cb) ->\n    @client.mute @name, nick, reason, handler_cb, error_cb\n\n  op: (nick, reason, handler_cb, error_cb) ->\n    @client.op @name, nick, reason, handler_cb, error_cb\n\n  deop: (nick, reason, handler_cb, error_cb) ->\n    @client.deop @name, nick, reason, handler_cb, error_cb\n\n  modifyAffiliation: (jid, affiliation, reason, success_cb, error_cb) ->\n    @client.modifyAffiliation @name,\n      jid, affiliation, reason,\n      success_cb, error_cb\n\n  ban: (jid, reason, handler_cb, error_cb) ->\n    @client.ban @name, jid, reason, handler_cb, error_cb\n\n  member: (jid, reason, handler_cb, error_cb) ->\n    @client.member @name, jid, reason, handler_cb, error_cb\n\n  revoke: (jid, reason, handler_cb, error_cb) ->\n    @client.revoke @name, jid, reason, handler_cb, error_cb\n\n  owner: (jid, reason, handler_cb, error_cb) ->\n    @client.owner @name, jid, reason, handler_cb, error_cb\n\n  admin: (jid, reason, handler_cb, error_cb) ->\n    @client.admin @name, jid, reason, handler_cb, error_cb\n\n  changeNick: (@nick) ->\n    @client.changeNick @name, nick\n\n  setStatus: (show, status) ->\n    @client.setStatus @name, @nick, show, status\n\n  ###Function\n  Adds a handler to the MUC room.\n    Parameters:\n  (String) handler_type - 'message', 'presence' or 'roster'.\n  (Function) handler - The handler function.\n  Returns:\n  id - the id of handler.\n  ###\n  addHandler: (handler_type, handler) ->\n    id = @_handler_ids++\n    switch handler_type\n      when 'presence'\n        @_presence_handlers[id] = handler\n      when 'message'\n        @_message_handlers[id] = handler\n      when 'roster'\n        @_roster_handlers[id] = handler\n      else\n        @_handler_ids--\n        return null\n    id\n\n  ###Function\n  Removes a handler from the MUC room.\n  This function takes ONLY ids returned by the addHandler function\n  of this room. passing handler ids returned by connection.addHandler\n  may brake things!\n    Parameters:\n  (number) id - the id of the handler\n  ###\n  removeHandler: (id) ->\n    delete @_presence_handlers[id]\n    delete @_message_handlers[id]\n    delete @_roster_handlers[id]\n\n  ###Function\n  Creates and adds an Occupant to the Room Roster.\n    Parameters:\n  (Object) data - the data the Occupant is filled with\n  Returns:\n  occ - the created Occupant.\n  ###\n  _addOccupant: (data) =>\n    occ = new Occupant data, @\n    @roster[occ.nick] = occ\n    occ\n\n  ###Function\n  The standard handler that managed the Room Roster.\n    Parameters:\n  (Object) pres - the presence stanza containing user information\n  ###\n  _roomRosterHandler: (pres) =>\n    data = XmppRoom._parsePresence pres\n    nick = data.nick\n    newnick = data.newnick or null\n    switch data.type\n      when 'error' then return true\n      when 'unavailable'\n        if newnick\n          data.nick = newnick\n          # If both Occupant Instances exist, switch the new one\n          # with the old renamed one\n          if @roster[nick] and @roster[newnick]\n            @roster[nick].update @roster[newnick]\n            @roster[newnick] = @roster[nick]\n          # If the renamed Occupant doesn't exist yet but the old one does,\n          # let the new one be the Same instance\n          if @roster[nick] and not @roster[newnick]\n            @roster[newnick] = @roster[nick].update data\n          # If the old Occupant is already deleted, do nothing\n          # unless @roster[newnick]\n          #   tmp_occ = @roster[newnick]\n          #   @roster[newnick].update(data).update(tmp_occ)\n        delete @roster[nick]\n      else\n        if @roster[nick]\n          @roster[nick].update data\n        else\n          @_addOccupant data\n    for id, handler of @_roster_handlers\n      delete @_roster_handlers[id] unless handler @roster, @\n    true\n\n  ###Function\n  Parses a presence stanza\n    Parameters:\n  (Object) data - the data extracted from the presence stanza\n  ###\n  @_parsePresence: (pres) ->\n    data = {}\n    data.nick = Strophe.getResourceFromJid pres.getAttribute(\"from\")\n    data.type = pres.getAttribute(\"type\")\n    data.states = []\n    for c in pres.childNodes\n      switch c.nodeName\n        when \"error\"\n          data.errorcode = c.getAttribute(\"code\")\n          data.error = c.childNodes[0]?.nodeName\n        when \"status\"\n          data.status = c.textContent or null\n        when \"show\"\n          data.show = c.textContent or null\n        when \"x\"\n          if c.getAttribute(\"xmlns\") is Strophe.NS.MUC_USER\n            for c2 in c.childNodes\n              switch c2.nodeName\n                when \"item\"\n                  data.affiliation = c2.getAttribute(\"affiliation\")\n                  data.role = c2.getAttribute(\"role\")\n                  data.jid = c2.getAttribute(\"jid\")\n                  data.newnick = c2.getAttribute(\"nick\")\n                when \"status\"\n                  if c2.getAttribute(\"code\")\n                    data.states.push c2.getAttribute(\"code\")\n    data\n\nclass RoomConfig\n\n  constructor: (info) ->\n    @parse info if info?\n\n  parse: (result) =>\n    query = result.getElementsByTagName(\"query\")[0].childNodes\n    @identities =  []\n    @features =  []\n    @x = []\n    for child in query\n      attrs = child.attributes\n      switch child.nodeName\n        when \"identity\"\n          identity = {}\n          identity[attr.name] = attr.textContent for attr in attrs\n          @identities.push identity\n        when \"feature\"\n          @features.push child.getAttribute(\"var\")\n        when \"x\"\n          break if (\n            (not child.childNodes[0].getAttribute(\"var\") is 'FORM_TYPE') or\n            (not child.childNodes[0].getAttribute(\"type\") is 'hidden') )\n          for field in child.childNodes when not field.attributes.type\n            @x.push (\n              var: field.getAttribute(\"var\")\n              label: field.getAttribute(\"label\") or \"\"\n              value: field.firstChild.textContent or \"\" )\n\n    \"identities\": @identities, \"features\": @features, \"x\": @x\n\nclass Occupant\n  constructor: (data, @room) ->\n    @update data\n\n  modifyRole: (role, reason, success_cb, error_cb) =>\n    @room.modifyRole @nick, role, reason, success_cb, error_cb\n\n  kick: (reason, handler_cb, error_cb) =>\n    @room.kick @nick, reason, handler_cb, error_cb\n\n  voice: (reason, handler_cb, error_cb) =>\n    @room.voice @nick, reason, handler_cb, error_cb\n\n  mute: (reason, handler_cb, error_cb) =>\n    @room.mute @nick, reason, handler_cb, error_cb\n\n  op: (reason, handler_cb, error_cb) =>\n    @room.op @nick, reason, handler_cb, error_cb\n\n  deop: (reason, handler_cb, error_cb) =>\n    @room.deop @nick, reason, handler_cb, error_cb\n\n  modifyAffiliation: (affiliation, reason, success_cb, error_cb) =>\n    @room.modifyAffiliation @jid, affiliation, reason, success_cb, error_cb\n\n  ban: (reason, handler_cb, error_cb) =>\n    @room.ban @jid, reason, handler_cb, error_cb\n\n  member: (reason, handler_cb, error_cb) =>\n    @room.member @jid, reason, handler_cb, error_cb\n\n  revoke: (reason, handler_cb, error_cb) =>\n    @room.revoke @jid, reason, handler_cb, error_cb\n\n  owner: (reason, handler_cb, error_cb) =>\n    @room.owner @jid, reason, handler_cb, error_cb\n\n  admin: (reason, handler_cb, error_cb) =>\n    @room.admin @jid, reason, handler_cb, error_cb\n\n  update: (data) =>\n    @nick         = data.nick         or null\n    @affiliation  = data.affiliation  or null\n    @role         = data.role         or null\n    @jid          = data.jid          or null\n    @status       = data.status       or null\n    @show         = data.show         or null\n    @\n\n"],"names":["Strophe","$pres","$msg","$iq","$build"],"mappings":"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"}